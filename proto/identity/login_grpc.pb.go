// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: identity/login.proto

package identity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityClient is the client API for Identity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityClient interface {
	RequestLogin(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*LoginMessage, error)
	Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*LoginResp, error)
	Debug(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginMessage, error)
}

type identityClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityClient(cc grpc.ClientConnInterface) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) RequestLogin(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*LoginMessage, error) {
	out := new(LoginMessage)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.Identity/RequestLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.Identity/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Debug(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginMessage, error) {
	out := new(LoginMessage)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.Identity/Debug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServer is the server API for Identity service.
// All implementations must embed UnimplementedIdentityServer
// for forward compatibility
type IdentityServer interface {
	RequestLogin(context.Context, *LoginMessage) (*LoginMessage, error)
	Login(context.Context, *LoginMessage) (*LoginResp, error)
	Debug(context.Context, *emptypb.Empty) (*LoginMessage, error)
	mustEmbedUnimplementedIdentityServer()
}

// UnimplementedIdentityServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityServer struct {
}

func (UnimplementedIdentityServer) RequestLogin(context.Context, *LoginMessage) (*LoginMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLogin not implemented")
}
func (UnimplementedIdentityServer) Login(context.Context, *LoginMessage) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIdentityServer) Debug(context.Context, *emptypb.Empty) (*LoginMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedIdentityServer) mustEmbedUnimplementedIdentityServer() {}

// UnsafeIdentityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServer will
// result in compilation errors.
type UnsafeIdentityServer interface {
	mustEmbedUnimplementedIdentityServer()
}

func RegisterIdentityServer(s grpc.ServiceRegistrar, srv IdentityServer) {
	s.RegisterService(&Identity_ServiceDesc, srv)
}

func _Identity_RequestLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).RequestLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.Identity/RequestLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).RequestLogin(ctx, req.(*LoginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.Identity/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Login(ctx, req.(*LoginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.Identity/Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Debug(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Identity_ServiceDesc is the grpc.ServiceDesc for Identity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Identity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jinfwhuang.dstoolkit.identity.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestLogin",
			Handler:    _Identity_RequestLogin_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Identity_Login_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _Identity_Debug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/login.proto",
}

// UserRegistryLoginClient is the client API for UserRegistryLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRegistryLoginClient interface {
	ListAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserList, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserByPubKey(ctx context.Context, in *PubKey, opts ...grpc.CallOption) (*User, error)
	GetUserByUserName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error)
	RequestLogin(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResp, error)
}

type userRegistryLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRegistryLoginClient(cc grpc.ClientConnInterface) UserRegistryLoginClient {
	return &userRegistryLoginClient{cc}
}

func (c *userRegistryLoginClient) ListAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/ListAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryLoginClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryLoginClient) GetUserByPubKey(ctx context.Context, in *PubKey, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/GetUserByPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryLoginClient) GetUserByUserName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/GetUserByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryLoginClient) RequestLogin(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/RequestLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryLoginClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegistryLoginServer is the server API for UserRegistryLogin service.
// All implementations must embed UnimplementedUserRegistryLoginServer
// for forward compatibility
type UserRegistryLoginServer interface {
	ListAllUsers(context.Context, *emptypb.Empty) (*UserList, error)
	AddUser(context.Context, *User) (*emptypb.Empty, error)
	GetUserByPubKey(context.Context, *PubKey) (*User, error)
	GetUserByUserName(context.Context, *UserName) (*User, error)
	RequestLogin(context.Context, *UserName) (*User, error)
	Login(context.Context, *User) (*LoginResp, error)
	mustEmbedUnimplementedUserRegistryLoginServer()
}

// UnimplementedUserRegistryLoginServer must be embedded to have forward compatible implementations.
type UnimplementedUserRegistryLoginServer struct {
}

func (UnimplementedUserRegistryLoginServer) ListAllUsers(context.Context, *emptypb.Empty) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllUsers not implemented")
}
func (UnimplementedUserRegistryLoginServer) AddUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserRegistryLoginServer) GetUserByPubKey(context.Context, *PubKey) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPubKey not implemented")
}
func (UnimplementedUserRegistryLoginServer) GetUserByUserName(context.Context, *UserName) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUserName not implemented")
}
func (UnimplementedUserRegistryLoginServer) RequestLogin(context.Context, *UserName) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLogin not implemented")
}
func (UnimplementedUserRegistryLoginServer) Login(context.Context, *User) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserRegistryLoginServer) mustEmbedUnimplementedUserRegistryLoginServer() {}

// UnsafeUserRegistryLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRegistryLoginServer will
// result in compilation errors.
type UnsafeUserRegistryLoginServer interface {
	mustEmbedUnimplementedUserRegistryLoginServer()
}

func RegisterUserRegistryLoginServer(s grpc.ServiceRegistrar, srv UserRegistryLoginServer) {
	s.RegisterService(&UserRegistryLogin_ServiceDesc, srv)
}

func _UserRegistryLogin_ListAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryLoginServer).ListAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/ListAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryLoginServer).ListAllUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistryLogin_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryLoginServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryLoginServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistryLogin_GetUserByPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryLoginServer).GetUserByPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/GetUserByPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryLoginServer).GetUserByPubKey(ctx, req.(*PubKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistryLogin_GetUserByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryLoginServer).GetUserByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/GetUserByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryLoginServer).GetUserByUserName(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistryLogin_RequestLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryLoginServer).RequestLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/RequestLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryLoginServer).RequestLogin(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistryLogin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryLoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinfwhuang.dstoolkit.identity.UserRegistryLogin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryLoginServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRegistryLogin_ServiceDesc is the grpc.ServiceDesc for UserRegistryLogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRegistryLogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jinfwhuang.dstoolkit.identity.UserRegistryLogin",
	HandlerType: (*UserRegistryLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllUsers",
			Handler:    _UserRegistryLogin_ListAllUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserRegistryLogin_AddUser_Handler,
		},
		{
			MethodName: "GetUserByPubKey",
			Handler:    _UserRegistryLogin_GetUserByPubKey_Handler,
		},
		{
			MethodName: "GetUserByUserName",
			Handler:    _UserRegistryLogin_GetUserByUserName_Handler,
		},
		{
			MethodName: "RequestLogin",
			Handler:    _UserRegistryLogin_RequestLogin_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserRegistryLogin_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/login.proto",
}
